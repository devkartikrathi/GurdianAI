generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(cuid())
  clerkUserId          String   @unique @map("clerk_user_id")
  email                String   @unique
  name                 String
  totalCapital         Decimal  @default(0) @map("total_capital") @db.Decimal(15, 2)
  maxDailyDrawdownPct  Decimal  @default(2.0) @map("max_daily_drawdown_pct") @db.Decimal(5, 2)
  maxConsecutiveLosses Int      @default(3) @map("max_consecutive_losses")
  riskPerTradePct      Decimal  @default(1.0) @map("risk_per_trade_pct") @db.Decimal(5, 2)
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  rawTrades               RawTrade[]
  matchedTrades           MatchedTrade[]
  riskSessions            RiskSession[]
  brokerConnections       BrokerConnection[]
  tradeBooks              TradeBook[]
  guardianInsights        GuardianInsight[]
  tradingSummaries        UserTradingSummary[]
  onboarding              Onboarding[]
  notificationPreferences NotificationPreferences[]
  dataExports             DataExport[]
  openTrades              OpenTrade[]
  dailyTrades             DailyTrades[]

  @@map("users")
}

model BrokerConnection {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  brokerName         String    @default("zerodha") @map("broker_name")
  apiKey             String    @map("api_key")
  apiSecret          String?   @map("api_secret")
  accessToken        String?   @map("access_token")
  requestToken       String?   @map("request_token")
  userIdZerodha      String?   @map("user_id_zerodha")
  userName           String?   @map("user_name")
  email              String?
  sessionGeneratedAt DateTime? @map("session_generated_at")
  expiresAt          DateTime? @map("expires_at")
  connectionStatus   String    @default("active") @map("connection_status")
  lastSyncAt         DateTime? @map("last_sync_at")

  // OAuth callback parameters
  oauthAction      String?   @map("oauth_action")
  oauthStatus      String?   @map("oauth_status")
  oauthType        String?   @map("oauth_type")
  oauthCompletedAt DateTime? @map("oauth_completed_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyTrades DailyTrades[]

  @@unique([userId, brokerName])
  @@map("broker_connections")
}

model DailyTrades {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  brokerConnectionId String   @map("broker_connection_id")
  tradeDate          DateTime @map("trade_date") // Date of trades (without time)
  totalTrades        Int      @default(0) @map("total_trades")
  totalBuyTrades     Int      @default(0) @map("total_buy_trades")
  totalSellTrades    Int      @default(0) @map("total_sell_trades")
  totalBuyQuantity   Decimal  @default(0) @map("total_buy_quantity") @db.Decimal(15, 2)
  totalSellQuantity  Decimal  @default(0) @map("total_sell_quantity") @db.Decimal(15, 2)
  totalBuyValue      Decimal  @default(0) @map("total_buy_value") @db.Decimal(15, 2)
  totalSellValue     Decimal  @default(0) @map("total_sell_value") @db.Decimal(15, 2)
  netQuantity        Decimal  @default(0) @map("net_quantity") @db.Decimal(15, 2)
  netValue           Decimal  @default(0) @map("net_value") @db.Decimal(15, 2)
  lastSyncAt         DateTime @default(now()) @map("last_sync_at")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  brokerConnection BrokerConnection @relation(fields: [brokerConnectionId], references: [id], onDelete: Cascade)

  @@unique([userId, brokerConnectionId, tradeDate])
  @@index([userId, tradeDate])
  @@map("daily_trades")
}

model TradeBook {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  fileName        String   @map("file_name")
  fileSize        Int      @map("file_size")
  uploadTimestamp DateTime @default(now()) @map("upload_timestamp")
  parsed          Boolean  @default(false)
  totalRows       Int      @default(0) @map("total_rows")
  schemaMapping   Json?    @map("schema_mapping")

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  rawTrades RawTrade[]

  @@map("trade_books")
}

model RawTrade {
  id            String   @id @default(cuid())
  userId        String
  tradeBookId   String
  symbol        String
  tradeType     String // BUY or SELL
  quantity      Decimal
  price         Decimal
  tradeDatetime DateTime
  commission    Decimal  @default(0)
  tradeId       String? // External trade ID from broker

  // New fields for trade matching
  remainingQuantity Decimal @default(0) // Unmatched quantity
  matchedQuantity   Decimal @default(0) // Quantity that has been matched
  isFullyMatched    Boolean @default(false)
  isOpenPosition    Boolean @default(false)

  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tradeBook TradeBook @relation(fields: [tradeBookId], references: [id], onDelete: Cascade)

  // Matched trades this raw trade is part of
  buyMatchedTrades  MatchedTrade[] @relation("BuyRawTrade")
  sellMatchedTrades MatchedTrade[] @relation("SellRawTrade")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([symbol])
  @@index([tradeDatetime])
  @@index([tradeType])
  @@index([isFullyMatched])
  @@index([isOpenPosition])
}

model MatchedTrade {
  id         String   @id @default(cuid())
  userId     String
  symbol     String
  buyDate    DateTime
  sellDate   DateTime
  buyTime    String?
  sellTime   String?
  quantity   Decimal
  buyPrice   Decimal
  sellPrice  Decimal
  pnl        Decimal
  pnlPct     Decimal
  commission Decimal  @default(0)

  // Enhanced fields for trade matching
  buyTradeId  String? // Reference to buy raw trade
  sellTradeId String? // Reference to sell raw trade
  duration    Int? // Duration in minutes
  isRealized  Boolean @default(true)

  // Relationships
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  buyRawTrade  RawTrade? @relation("BuyRawTrade", fields: [buyTradeId], references: [id])
  sellRawTrade RawTrade? @relation("SellRawTrade", fields: [sellTradeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([symbol])
  @@index([buyDate])
  @@index([sellDate])
  @@index([isRealized])
}

model OpenTrade {
  id         String   @id @default(cuid())
  userId     String
  symbol     String
  tradeType  String // BUY or SELL
  date       DateTime
  time       String?
  price      Decimal
  quantity   Decimal
  commission Decimal  @default(0)
  tradeId    String?

  // Enhanced fields for position tracking
  remainingQuantity Decimal // Current open quantity
  averagePrice      Decimal // Average price for position
  unrealizedPnl     Decimal  @default(0)
  unrealizedPnlPct  Decimal  @default(0)
  lastUpdated       DateTime @default(now())

  // New fields for manual management
  isInvestment      Boolean   @default(false) // Marked as long-term investment
  isManuallyClosed  Boolean   @default(false) // Manually closed by user
  manualCloseDate   DateTime? // When manually closed
  manualCloseReason String? // Reason for manual closure
  notes             String? // User notes about the position

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, symbol, tradeType]) // One open position per symbol/type
  @@index([userId])
  @@index([symbol])
  @@index([tradeType])
  @@index([date])
  @@index([isInvestment])
  @@index([isManuallyClosed])
}

model TodayTrade {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  symbol        String
  tradeType     String   @map("trade_type")
  quantity      Int
  price         Decimal  @db.Decimal(10, 2)
  tradeDatetime DateTime @map("trade_datetime")
  source        String   @default("zerodha_api")
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("today_trades")
}

model GuardianInsight {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  insightType     String   @map("insight_type")
  insightData     Json     @map("insight_data")
  confidenceScore Decimal? @map("confidence_score") @db.Decimal(3, 2)
  tradesAnalyzed  Int      @map("trades_analyzed")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("guardian_ai_insights")
}

model RiskSession {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  sessionDate        DateTime  @map("session_date") @db.Date
  tradesCount        Int       @default(0) @map("trades_count")
  currentPnl         Decimal   @default(0) @map("current_pnl") @db.Decimal(15, 2)
  currentDrawdownPct Decimal   @default(0) @map("current_drawdown_pct") @db.Decimal(5, 2)
  consecutiveLosses  Int       @default(0) @map("consecutive_losses")
  lastTradeTime      DateTime? @map("last_trade_time")
  riskStatus         String    @default("green") @map("risk_status")
  sessionActive      Boolean   @default(true) @map("session_active")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sessionDate])
  @@map("risk_sessions")
}

model UserTradingSummary {
  id             String    @id @default(cuid())
  userId         String    @map("user_id")
  version        Int
  generatedAt    DateTime  @default(now()) @map("generated_at")
  dataRangeStart DateTime  @map("data_range_start") @db.Date
  dataRangeEnd   DateTime  @map("data_range_end") @db.Date
  summaryData    Json      @map("summary_data")
  insightsHash   String?   @map("insights_hash")
  nextUpdateDue  DateTime? @map("next_update_due")
  createdAt      DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_trading_summary")
}

model Onboarding {
  id                   String    @id @default(cuid())
  userId               String    @map("user_id")
  experience           String?
  totalCapital         Decimal   @map("total_capital") @db.Decimal(15, 2)
  riskPerTradePct      Decimal   @map("risk_per_trade_pct") @db.Decimal(5, 2)
  maxDailyDrawdownPct  Decimal   @map("max_daily_drawdown_pct") @db.Decimal(5, 2)
  maxConsecutiveLosses Int       @map("max_consecutive_losses")
  completed            Boolean   @default(false)
  completedAt          DateTime? @map("completed_at")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("onboarding")
}

model NotificationPreferences {
  id                 String   @id @default(cuid())
  userId             String   @unique @map("user_id")
  riskAlerts         Boolean  @default(true) @map("risk_alerts")
  dailyDigest        Boolean  @default(true) @map("daily_digest")
  weeklyReport       Boolean  @default(false) @map("weekly_report")
  tradeNotifications Boolean  @default(true) @map("trade_notifications")
  performanceAlerts  Boolean  @default(true) @map("performance_alerts")
  emailNotifications Boolean  @default(true) @map("email_notifications")
  pushNotifications  Boolean  @default(true) @map("push_notifications")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model DataExport {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  exportType  String    @map("export_type")
  status      String    @default("pending")
  filePath    String?   @map("file_path")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("data_exports")
}
